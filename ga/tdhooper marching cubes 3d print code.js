// let str = ``
// let v1 = new THREE.Vector3()
// let q1 = new THREE.Quaternion()
// let yDown = new THREE.Vector3(0., -1., 0.)
// for (let i = 0; i < 40; ++i) {
//     v1.y = Math.random()
//     let multip = Math.sqrt(1. - v1.y * v1.y)
//     let angle = Math.random() * 6.28318530718
//     v1.x = Math.cos(angle) * multip
//     v1.z = Math.sin(angle) * multip
//     q1.setFromUnitVectors(yDown, v1)
//     str += `qArr[` + i + `]=vec4(` + q1.x.toFixed(3) + `,` + q1.y.toFixed(3) + `,` + q1.z.toFixed(3) + `,` + q1.w.toFixed(3) + `);`
// }
// console.log(str)


// let str = ``
// let v1 = new THREE.Vector3()
// for (let i = 0; i < 2; ++i) {
//     v1.z = Math.random()
//     let multip = Math.sqrt(1. - v1.z * v1.z)
//     let angle = Math.random() * 6.28318530718
//     v1.x = Math.cos(angle) * multip
//     v1.y = Math.sin(angle) * multip
//     str += `[` + v1.x.toFixed(3) + `,` + v1.y.toFixed(3) + `,` + v1.z.toFixed(3) + `],`
// }
// console.log(`[` + str + `]`)




// BOUNDING_BOX_POSITION 0 0 0
// BOUNDING_BOX_SIZE 2 2 2

// Your glsl signed distance function:

#define SIN_CONE_ANGLE 0.0499791692706783
#define COS_CONE_ANGLE 0.9987502603949663

float sphere(vec3 p, float radius){
    return length(p) - radius;
}

float opSubtraction(float d1, float d2) { return max(-d1, d2); }
float opSmoothSubtraction(float d1, float d2) {
  float smoothness = 0.06;
    float h = clamp(0.5 - 0.5 * (d2 + d1) / smoothness, 0.0, 1.0);
    return mix(d2, -d1, h) + smoothness * h * (1.0 - h);
}

float sdCone(vec3 p)
{
    vec2 c = vec2(SIN_CONE_ANGLE, COS_CONE_ANGLE);

    vec2 q = vec2(length(p.xz), -p.y);
    float d = length(q - c * max(dot(q, c), 0.0));
    return d * ((q.x * COS_CONE_ANGLE - q.y * SIN_CONE_ANGLE < 0.0) ? -1.0 : 1.0);
}

vec3 applyQuaternion(in vec3 v, in vec4 q) {
    float ix = q.w * v.x + q.y * v.z - q.z * v.y;
    float iy = q.w * v.y + q.z * v.x - q.x * v.z;
    float iz = q.w * v.z + q.x * v.y - q.y * v.x;
    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;

    vec3 ret;
    ret.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
    ret.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
    ret.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
    return ret;
}

float mapDistance(vec3 p) {

    //take that array
    //figure out the 
  float innerShellDist = sphere(p, .97);
  float outerShellDist = sphere(p, 1.);
  float floorDist = p.y;
  
  float current = outerShellDist;
    current = opSubtraction(floorDist, current);
    current = opSubtraction(innerShellDist, current);
  
  vec4 qArr[200];
    qArr[0]=vec4(-0.413,0.000,-0.641,0.647);qArr[1]=vec4(-0.077,0.000,-0.936,0.343);qArr[2]=vec4(0.772,0.000,-0.609,0.183);qArr[3]=vec4(-0.092,0.000,0.800,0.594);qArr[4]=vec4(0.598,0.000,-0.543,0.589);qArr[5]=vec4(0.433,0.000,-0.634,0.641);qArr[6]=vec4(0.740,0.000,0.111,0.663);qArr[7]=vec4(0.862,0.000,-0.479,0.166);qArr[8]=vec4(0.894,0.000,-0.236,0.380);qArr[9]=vec4(-0.230,0.000,-0.923,0.309);qArr[10]=vec4(0.264,0.000,-0.915,0.306);qArr[11]=vec4(0.822,0.000,0.208,0.530);qArr[12]=vec4(-0.496,0.000,-0.549,0.672);qArr[13]=vec4(-0.209,0.000,0.678,0.705);qArr[14]=vec4(-0.823,0.000,-0.519,0.231);qArr[15]=vec4(0.348,0.000,0.773,0.530);qArr[16]=vec4(-0.612,0.000,-0.622,0.488);qArr[17]=vec4(0.516,0.000,-0.515,0.684);qArr[18]=vec4(-0.566,0.000,0.602,0.564);qArr[19]=vec4(-0.385,0.000,-0.685,0.619);qArr[20]=vec4(-0.863,0.000,-0.128,0.488);qArr[21]=vec4(0.828,0.000,0.497,0.261);qArr[22]=vec4(-0.326,0.000,0.638,0.697);qArr[23]=vec4(-0.383,0.000,-0.856,0.348);qArr[24]=vec4(-0.899,0.000,0.362,0.245);qArr[25]=vec4(-0.408,0.000,0.702,0.584);qArr[26]=vec4(0.469,0.000,0.852,0.233);qArr[27]=vec4(0.411,0.000,0.792,0.452);qArr[28]=vec4(0.881,0.000,0.139,0.452);qArr[29]=vec4(0.516,0.000,-0.576,0.633);qArr[30]=vec4(-0.390,0.000,0.690,0.610);qArr[31]=vec4(0.982,0.000,-0.117,0.151);qArr[32]=vec4(0.812,0.000,-0.119,0.571);qArr[33]=vec4(-0.726,0.000,0.088,0.683);qArr[34]=vec4(0.203,0.000,-0.807,0.555);qArr[35]=vec4(0.894,0.000,-0.249,0.373);qArr[36]=vec4(-0.190,0.000,-0.767,0.613);qArr[37]=vec4(0.364,0.000,-0.657,0.660);qArr[38]=vec4(0.708,0.000,-0.266,0.654);qArr[39]=vec4(-0.141,0.000,-0.987,0.079);qArr[40]=vec4(0.348,0.000,0.729,0.590);qArr[41]=vec4(0.576,0.000,-0.590,0.566);qArr[42]=vec4(0.108,0.000,-0.986,0.128);qArr[43]=vec4(0.824,0.000,0.484,0.294);qArr[44]=vec4(-0.902,0.000,-0.382,0.203);qArr[45]=vec4(0.854,0.000,-0.168,0.493);qArr[46]=vec4(0.560,0.000,0.645,0.520);qArr[47]=vec4(-0.806,0.000,-0.457,0.377);qArr[48]=vec4(0.027,0.000,0.887,0.461);qArr[49]=vec4(0.754,0.000,0.294,0.587);qArr[50]=vec4(-0.696,0.000,-0.569,0.439);qArr[51]=vec4(-0.801,0.000,-0.077,0.594);qArr[52]=vec4(-0.086,0.000,0.756,0.649);qArr[53]=vec4(0.557,0.000,-0.783,0.279);qArr[54]=vec4(-0.119,0.000,-0.947,0.298);qArr[55]=vec4(0.789,0.000,-0.161,0.593);qArr[56]=vec4(-0.757,0.000,-0.204,0.621);qArr[57]=vec4(0.706,0.000,-0.242,0.666);qArr[58]=vec4(0.401,0.000,-0.716,0.572);qArr[59]=vec4(0.194,0.000,0.724,0.662);qArr[60]=vec4(0.610,0.000,0.519,0.599);qArr[61]=vec4(0.777,0.000,-0.355,0.519);qArr[62]=vec4(0.456,0.000,-0.828,0.326);qArr[63]=vec4(-0.674,0.000,-0.364,0.643);qArr[64]=vec4(-0.039,0.000,-0.773,0.633);qArr[65]=vec4(0.386,0.000,0.860,0.334);qArr[66]=vec4(-0.878,0.000,0.136,0.458);qArr[67]=vec4(-0.661,0.000,0.290,0.692);qArr[68]=vec4(0.826,0.000,0.439,0.354);qArr[69]=vec4(-0.735,0.000,-0.072,0.675);qArr[70]=vec4(0.581,0.000,-0.659,0.478);qArr[71]=vec4(-0.732,0.000,0.681,0.022);qArr[72]=vec4(0.807,0.000,0.386,0.448);qArr[73]=vec4(0.093,0.000,-0.809,0.580);qArr[74]=vec4(-0.232,0.000,0.768,0.597);qArr[75]=vec4(-0.350,0.000,0.914,0.206);qArr[76]=vec4(0.559,0.000,-0.623,0.547);qArr[77]=vec4(-0.443,0.000,0.837,0.321);qArr[78]=vec4(-0.268,0.000,0.822,0.502);qArr[79]=vec4(0.970,0.000,-0.018,0.244);qArr[80]=vec4(-0.187,0.000,-0.888,0.420);qArr[81]=vec4(0.907,0.000,-0.165,0.388);qArr[82]=vec4(-0.386,0.000,-0.834,0.394);qArr[83]=vec4(-0.253,0.000,-0.967,0.033);qArr[84]=vec4(0.674,0.000,-0.354,0.648);qArr[85]=vec4(-0.293,0.000,0.740,0.605);qArr[86]=vec4(0.180,0.000,-0.965,0.189);qArr[87]=vec4(-0.566,0.000,0.443,0.695);qArr[88]=vec4(-0.800,0.000,-0.419,0.430);qArr[89]=vec4(0.746,0.000,-0.091,0.659);qArr[90]=vec4(-0.344,0.000,-0.635,0.691);qArr[91]=vec4(0.452,0.000,0.713,0.536);qArr[92]=vec4(0.122,0.000,0.823,0.554);qArr[93]=vec4(-0.725,0.000,-0.107,0.680);qArr[94]=vec4(-0.638,0.000,-0.692,0.338);qArr[95]=vec4(0.156,0.000,0.902,0.402);qArr[96]=vec4(0.140,0.000,0.701,0.699);qArr[97]=vec4(-0.018,0.000,0.858,0.514);qArr[98]=vec4(0.603,0.000,-0.448,0.660);qArr[99]=vec4(0.571,0.000,-0.446,0.690);qArr[100]=vec4(-0.893,0.000,0.264,0.364);qArr[101]=vec4(0.707,0.000,0.234,0.667);qArr[102]=vec4(-0.796,0.000,0.173,0.580);qArr[103]=vec4(0.715,0.000,0.097,0.692);qArr[104]=vec4(0.931,0.000,0.227,0.286);qArr[105]=vec4(0.487,0.000,0.739,0.465);qArr[106]=vec4(-0.307,0.000,-0.779,0.547);qArr[107]=vec4(-0.160,0.000,0.968,0.193);qArr[108]=vec4(-0.118,0.000,-0.985,0.126);qArr[109]=vec4(0.309,0.000,-0.640,0.704);qArr[110]=vec4(0.297,0.000,-0.728,0.618);qArr[111]=vec4(0.785,0.000,0.580,0.217);qArr[112]=vec4(-0.627,0.000,-0.615,0.479);qArr[113]=vec4(-0.864,0.000,-0.161,0.478);qArr[114]=vec4(-0.924,0.000,0.272,0.269);qArr[115]=vec4(0.719,0.000,-0.102,0.688);qArr[116]=vec4(0.789,0.000,-0.131,0.601);qArr[117]=vec4(-0.334,0.000,-0.924,0.184);qArr[118]=vec4(0.326,0.000,-0.798,0.507);qArr[119]=vec4(-0.683,0.000,-0.444,0.580);qArr[120]=vec4(-0.244,0.000,0.693,0.678);qArr[121]=vec4(-0.235,0.000,0.792,0.564);qArr[122]=vec4(-0.521,0.000,-0.587,0.619);qArr[123]=vec4(-0.618,0.000,-0.555,0.557);qArr[124]=vec4(-0.191,0.000,0.754,0.628);qArr[125]=vec4(0.174,0.000,0.907,0.383);qArr[126]=vec4(0.395,0.000,0.879,0.265);qArr[127]=vec4(-0.456,0.000,-0.707,0.541);qArr[128]=vec4(0.688,0.000,0.360,0.630);qArr[129]=vec4(0.762,0.000,0.358,0.540);qArr[130]=vec4(0.147,0.000,0.931,0.334);qArr[131]=vec4(0.717,0.000,-0.312,0.623);qArr[132]=vec4(-0.826,0.000,-0.511,0.238);qArr[133]=vec4(-0.252,0.000,0.809,0.531);qArr[134]=vec4(0.113,0.000,-0.734,0.669);qArr[135]=vec4(-0.129,0.000,0.850,0.512);qArr[136]=vec4(0.121,0.000,-0.949,0.291);qArr[137]=vec4(0.770,0.000,0.338,0.541);qArr[138]=vec4(0.773,0.000,-0.218,0.596);qArr[139]=vec4(0.961,0.000,0.118,0.250);qArr[140]=vec4(0.574,0.000,-0.596,0.562);qArr[141]=vec4(0.436,0.000,0.632,0.641);qArr[142]=vec4(0.806,0.000,0.204,0.556);qArr[143]=vec4(0.670,0.000,-0.463,0.580);qArr[144]=vec4(-0.430,0.000,0.761,0.486);qArr[145]=vec4(0.579,0.000,-0.598,0.555);qArr[146]=vec4(0.137,0.000,-0.906,0.401);qArr[147]=vec4(0.655,0.000,-0.270,0.706);qArr[148]=vec4(0.723,0.000,-0.533,0.439);qArr[149]=vec4(-0.806,0.000,0.378,0.455);qArr[150]=vec4(-0.730,0.000,0.378,0.569);qArr[151]=vec4(0.423,0.000,-0.807,0.411);qArr[152]=vec4(0.287,0.000,0.744,0.603);qArr[153]=vec4(0.010,0.000,0.810,0.587);qArr[154]=vec4(-0.943,0.000,0.285,0.172);qArr[155]=vec4(0.153,0.000,0.932,0.328);qArr[156]=vec4(-0.006,0.000,0.917,0.399);qArr[157]=vec4(-0.088,0.000,-0.885,0.457);qArr[158]=vec4(-0.670,0.000,0.341,0.659);qArr[159]=vec4(0.706,0.000,-0.250,0.663);qArr[160]=vec4(0.734,0.000,0.272,0.622);qArr[161]=vec4(0.146,0.000,0.778,0.611);qArr[162]=vec4(0.615,0.000,-0.432,0.660);qArr[163]=vec4(-0.668,0.000,0.395,0.630);qArr[164]=vec4(-0.713,0.000,0.326,0.621);qArr[165]=vec4(-0.683,0.000,-0.719,0.131);qArr[166]=vec4(-0.200,0.000,0.680,0.706);qArr[167]=vec4(-0.834,0.000,-0.201,0.514);qArr[168]=vec4(-0.612,0.000,0.556,0.563);qArr[169]=vec4(-0.897,0.000,0.078,0.435);qArr[170]=vec4(-0.084,0.000,-0.845,0.528);qArr[171]=vec4(-0.464,0.000,-0.864,0.196);qArr[172]=vec4(-0.467,0.000,0.794,0.389);qArr[173]=vec4(-0.356,0.000,0.780,0.515);qArr[174]=vec4(-0.746,0.000,0.125,0.654);qArr[175]=vec4(0.245,0.000,0.910,0.335);qArr[176]=vec4(-0.757,0.000,-0.274,0.592);qArr[177]=vec4(0.666,0.000,0.465,0.583);qArr[178]=vec4(0.861,0.000,-0.420,0.288);qArr[179]=vec4(0.707,0.000,-0.688,0.163);qArr[180]=vec4(-0.309,0.000,-0.767,0.562);qArr[181]=vec4(-0.717,0.000,-0.196,0.668);qArr[182]=vec4(0.666,0.000,0.272,0.695);qArr[183]=vec4(0.077,0.000,0.762,0.643);qArr[184]=vec4(0.305,0.000,0.827,0.473);qArr[185]=vec4(0.023,0.000,0.806,0.592);qArr[186]=vec4(0.114,0.000,0.887,0.447);qArr[187]=vec4(-0.617,0.000,0.448,0.647);qArr[188]=vec4(0.350,0.000,-0.875,0.333);qArr[189]=vec4(0.667,0.000,-0.388,0.636);qArr[190]=vec4(-0.708,0.000,0.066,0.703);qArr[191]=vec4(0.711,0.000,0.142,0.689);qArr[192]=vec4(-0.295,0.000,-0.851,0.435);qArr[193]=vec4(0.038,0.000,-0.766,0.642);qArr[194]=vec4(0.263,0.000,-0.808,0.527);qArr[195]=vec4(-0.155,0.000,0.905,0.396);qArr[196]=vec4(0.814,0.000,-0.064,0.577);qArr[197]=vec4(0.727,0.000,0.137,0.673);qArr[198]=vec4(-0.106,0.000,-0.902,0.419);qArr[199]=vec4(0.865,0.000,0.126,0.486);




    for (int i = 0; i < 200; ++i) {
    	vec3 transformedP = applyQuaternion(p, qArr[i]);
    	float coneDist = sdCone(transformedP);
        current = opSubtraction(coneDist, current);
    }

    return current;
}
